vesion
1.1.1:		2019.9.2	 		  
	实现：
	（1）调试发送时间段内FLASH中存储的数据，最终在开发板上可以进行对于存储数据，按照通过时间区间来发送指定内存区间的所有数据，本次实验通过雨量
	数据来进行实验；
	问题：
	（1）出现了有几次读不出数据，打印结果为0X00,0XFF，这个问题待确认；
	（2）怎样去写完整地时间段数据发送，尤其是对于CRC怎么来计算，来比较好；
1.2.1       2019.9.4
	实现：
	（1）时间段数据通过分包发送原理，这样上面CRC的问题就和4G写法类似，基本框架形成，具体部分待补充；
	 (2)4G模块通过串口2进行调试，实现图片上传到服务器，上传到咱们服务器的时间大概2分钟，延时100ms,而水文所服务器应该没开，图片数据发送不过去；
	 (3)部分动态分配内存在return之前没有释放；
1.2.2   	2019.9.5
	实现：
	（1）之前图片往水文所发送出现问题是由于，那个帧上面的两个地址没有改对，还有之前对于多包数据发送，正文部分理解出现问题；
	（2）4G模块使用过程中，出错需要复位，但是复位后，使用需要近10秒延时，等待入网；
	
	问题：
	（1）图片往水文所发送字节数；发送时间2分半左右；
	
1.2.3
	实现：
	（1）发现透传模式速度比较快，非透传模式需要延迟；改成透传模式进行测试,这时与水文所通信基本与延迟关系不大，但是可能中间过程中还是会出项，重发超过3次，导致发送图片失败；l两者之间产生区别的原因是什么，一直未知；
	（2）透传模式延时1ms,字节数900多字节，向水文所发送图片，大部分无错，小概率出错。
1.3.1
	实现：
	（1）修改存储方式，具体看memory.c文件（注意数据打印时，从函数外面打印数据得到的全是0XFF,发现SPI2通信模式不对，经过修改后，发现正常；
	（2）编写时间区间读写FLASH存储数据函数；
1.3.2
	（1）之前的设计是通过年月日来取时间段，每个包数据都为576个字节，即24*12*2，并不是通过通讯协议上的精确到分，而且那样可能会产生分成三个部分，照成处理麻烦写；
	（2）参考之前设计，以及数据发送简易性，将雨量存储字节也改为2个字节；
	（3）将某一要素数据按照一定格式发送函数，基本实现；
1.4.1        2019.9.17
	(1)水位数据采集逻辑实现程序写完，待调试确认；
   （2）各电源控制GPIO输出，已经添加完成，需要调试是否可控电源；
   （3）串口1部分同样采用DMA+IDLE获取帧数据，雨量脉冲计数采用定时器输入捕获来捕捉电平变化；
2.1.1
	基本完成硬件所有部分调试，同时加入了数据采集逻辑部分，图片发送部分修改，AD采集逻辑部分代码，各驱动代码部分修改。
	问题解决
	（1）图片发送，不对每一个包下报报文检查，这样就可以避免误判；
	（2）AD采集多通道检测，逻辑部分实现；

	其它问题：
	（1）SD3078显示实时时间有问题；
	（2）AD采集那边的二极管型号不对；
	（3）4G模块给我们自己的服务器发图片，数据为1200个字节时，检查接受的长度没问题，但是图片打开失真；
2.1.2
	实现：
	（1）加报、小时报、修改时钟基本逻辑实现；(正式数据填充未完成)
	（2）图片采集发送，基本功能，图片有时会失真，问题待确认，
	（3）232各串口接受函数；

2.1.3
	注意写水位数据的时候那个最后一个参数是数据个数，而不是字节个数；
	实现：
	(1)添加加报小时报数据逻辑，
	(2)添加雨量、水位等要素在加报、小时报、查询实时数据中的逻辑；

2.1.4
	每个报点（意为5，10，15等分钟整点）前30s时SD3078报警开机，每次报点发送报文后，进入停机模式，等待下一次报警唤醒；
	修改：
	（1）由于串口接受中断与串口外部中断冲突，导致不能接收指令，所以暂时外部中断在唤醒后关闭；在待机前将外部中断开启，外部中断成功后，再将外部中断响应一次后，
	再将外部中断关闭；
	（2）在工作时修改实时时钟后，可能存在报文有些不发的问题，待确认，
	（3）时间段报文针对水位和雨量，两种不同的数据长度；

2.2.1
	问题：目前一直以总个系统运行为目标进行调试，将232_3作为工作串口，232_1作为打印串口，FTP任务只能运行开机一次，后面进不去
		ST16C554拓展串口接收有问题，
	实现：
		1.将232_3进行接受命令，唤醒；  +3.3_6 不能关闭 中断引脚电压0.9v,唤不醒;(解决问题systeminit)

2.3.1
	实现：
		1.BLUETOOTH修改实时时钟，蓝牙通信的基本架构；
		
	问题：
		1.ST16C554串口接收问题，最大接收16个字节；
		2.4G模块DMA不能复位地址，DMA+IDLE使用出现问题；
		3.FTP工作问题；
2.3.2
	实现
		1.完成存储数据长度的修改，但是各报文格式需要相应地修改；
		2.中断中完成初始化，任务中复位初始化有问题，

2.3.3
	实现：
		1.小时报报文中F4F5格式转换逻辑，对于F5C0那个2个字节的数据，目前是按照低字节先发送的；
		2.简单地将初始化参数放在一个结构体中，存入到FLASH特定及基地址中，基本思路已经明确，具体功能待加；
	问题：
		1.蓝牙通信只能简单上下报文数据发送，部分通讯协议有待商榷；
	接下来：
		1.需要重新确认下之前的串口问题
		2.将参数记录信息wa逻辑代码完善；
2.3.4
	4G模块那个DMA问题解决，然后在106.15.234.181上模拟发送查询与修改时钟，查询与修改时钟基本验证可行的，但是部分接收数据打印不对；
	
	实现：
		1.针对时间段数据，可以将数据提取精确到以小时为单位，这样可以升级了之前写的最少以天来提取数据，1个包正文12个小时的数据，格式采用HEX- M3格式；
	问题:
		1.主函数将进入低功耗与操作系统进入低功耗,实际功耗不同? 任务没有挂起?
		2.FLASH那个电源控制不了 +3.3V_3			
	接下来：
		1.将参数记录信息wa逻辑代码完善；
		2.将那个232串口驱动接收调试；
		
2.3.5
	实现：
		1.针对4G模块连接不稳定问题，有时连接失败，改变函数配置，稳定性更高,4G由于需要同时连接多个服务器，则不能采用透传模式，改回TCP模式；
		2.能通过GPRS查询数据，修改时钟，下载时间段数据,针对小时报的0点，0-1的BUG错误修改，同时0时天数需要减去1；
		3.将4G模块的AT+CIPSEND指令取消判断是否成功；

2.3.6
	实现：
		1.短信功能测试；
		2.图片发。送逻辑如何加进去，考虑到并不是存一张图片发一次，所以就考虑只管存，不发，然后要发送的时候再说，
		3.串口接收数据进入应答模式，这样便可以通过下达指令，返回数据，将应答式与自报式分开；
	问题：
		1.用串口唤醒后，Assertion "OSQCreate" failed at line 66 in ..\LWIP\arch\sys_arch.c 报错；
		2.进入待机模式的功耗不是确定的，有时是15毫安，有时28毫安左右；
2.3.7
	实现：
		1.图片 框架为年-月-日，暂时还是先用小时为最小单位，不然以5分钟存储，一天288张，图片名字为190101-0105.jpg格式,删除超时目录；
		2.可以通过图片号，来选择是否进行存储操作；
	问题：
		1.需要待测试长时间工作，图片存储是否会出问题；
2.3.8 
	修改：
		1.水位小时报F5C0采用相对水位上报，并不是差值上报；
	
	实现：
		1.解决ST16C554BUG,问题在于中断中的那个延时时间不合适,改成100us，后工作正常；
		2.将RS232_3替换为工作串口，RS232_1为打印串口，修改相应代码；

2.3.9
	修改：
		1.将图片存储的名字中加上时间，同时将每次唤醒后的存储二张图片，注意第二张是否也有问题,测试后大多数第二张没问题的；
		2.将时间改为10分钟存一次图片,最好往可修改时间存储方向修改，基本修改完成，注意这样只会是10分钟间隔，不是按时间准点存储；
		3.在系统中添加发送图片数据到服务器的任务；

	问题：
		1.为什么唤醒恢复FTP任务后，那个2张图片存储成功需要1分钟； //复现率低
		2.4g模块进入待机前最好主动向服务器断开连接，唤醒后能够重新建立连接,之前在任务中重新初始化不行，是因为部分静态全局变量没有重新复位；
		3.图片在任务中发送时，图片发送后接收，图片接接收有问题；（1）在主函数直接发没有问题，（2）调试在任务中单独发送时，也是可以的，
		  发现问题，应该是丢了一个包发送，第二个包没有接收成功,第二个包应该没有发送完成；
		多次测试，在server.c中运行后打印出的数据没有第二帧数据，为什么单个任务发送时就可以发送第二帧数据；
		猜测：
			1.服务器代码有问题，没有识别出来，排除；
			2.第二帧数据能打印出来，没发送成功，可能是SIM7600，上传数据指令没有上传成功；
			3.尝试将gprs发送数据改为不定长发送数据进行调试，验证这样是否能够收到第二帧数据；
			4.第二帧数据与第一帧数据字数不同，发送延迟；
2.3.10
	修改
		1.添加sw_log打印函数；
		2.将4G向服务器发送图片数据，添加发送完成确认（第二帧）数据，这样确保能发送成功sn = 2时的数据；
	问题：
		1.服务器连接成功判断是有问题的，并不能判断正确；
		2.在gprs_send_cmd中加入memset 函数代码后4G模块发送变卡顿；

2.3.11
	修改：
		1.取消外部串口中断1的功能，其中包括唤醒；
		2.那个DMA不能复位，导致DMA接收数据包含之前的数据，问题发现在sd3078rtc.h的宏DISABLE与定义的枚举类型重名导致冲突；
		3.突然出现那个待机唤醒后存储图片那里卡住，经调试发现可能是由于SRAM占用太多，导致程序卡死(排除掉不对)，sw_log内存溢出，开发在任务栈中
		的变量占用内存太大，尽量使用外部内存；
		4.针对4G第一个包，第二个包发送卡顿现象,  问题出现在AT+CIPSEND指令回执判断有误，应该是">",而不是“+CIPSEND”;
	问题：
		1.为什么就是在所有任务都开启后，第二个包发送出现AT+CIPSEND failed,单独执行该任务时，没有问题？

2.3.12
	问题：
		1.怎样实现可以改变工作模式方案，将整个系统的工作模式从被动模式转化为应答模式(修改工作模式应该安排在发报结束时，蓝牙暂不考虑)，
		首先应答模式确定应答模式是怎样的：设计应答式，只能运行接收指令任务（接收指令和蓝牙模式），其它任务不能执行，挂起基本发报任务，（则GPRS任务肯定没有信号量了，进入待机模式的任务
		也没有相应的消息了，FTP任务也会一直挂起了）， 功能简单的实现；
		2.功耗问题
		进入待机模式后，功耗不确定的变化；将+3.3_4关闭，功耗基本是13 mA左右；
		3.Assertion "OSQCreate" failed at line 66 in ..\LWIP\arch\sys_arch.c出现，将OS_MAX_EVENTS 从20提高到30，进行测试，之后没有出现；
	思路：
		1.通过232_3规定更改模式的协议，在收到切换应答模式时，挂起进入待机模式，与基本发报的任务，这样等于系统进入应答式，
		然后串口接收到默认的指令，这样恢复进入待机的任务，系统会进入待机，等待下一次的闹钟唤醒；

		2.任务堆栈的大小影响系统的工作，过大可能内存不足，过小程序会卡死；
	
	修改：
		1.实验通过232_3发送功能码0x01,0x02分别为进入应答，和退出应答模式，指令发送应该在RTU发送报文完成的时间，等待进入睡眠的时刻内，接收到应答模式命令挂起进入待机模式任务，与BASIC MESSAGE
		任务，退出模式用恢复进入待机模式任务；
		
		2. 添加USB驱动，注意代码内存空间必须需要考虑，内存不多了, USb里面有重名memory.c文件，自定义修改；

2.3.13
	测试：
		1.SD3078能否同时建立多种中断模式，（不行）
		2.添加设置参数，查询参数功能；

		


		